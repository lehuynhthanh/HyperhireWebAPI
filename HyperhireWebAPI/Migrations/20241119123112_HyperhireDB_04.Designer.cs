// <auto-generated />
using System;
using HyperhireWebAPI.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HyperhireWebAPI.Migrations
{
    [DbContext(typeof(HyperhireDbContext))]
    [Migration("20241119123112_HyperhireDB_04")]
    partial class HyperhireDB_04
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HyperhireWebAPI.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryNameId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f821cc78-5a56-4b27-9e1c-0582d4f9aaf8"),
                            CategoryNameId = "amazing_view",
                            Created = new DateTime(2024, 11, 19, 19, 31, 11, 884, DateTimeKind.Local).AddTicks(8963),
                            CreatedBy = "Admin",
                            Icon = "url icon",
                            IsActive = true,
                            Name = "Amazing View"
                        });
                });

            modelBuilder.Entity("HyperhireWebAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<int>("TotalGuests")
                        .HasColumnType("int");

                    b.Property<int>("TotalInfants")
                        .HasColumnType("int");

                    b.Property<int>("TotalNights")
                        .HasColumnType("int");

                    b.Property<int>("TotalPets")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("HyperhireWebAPI.Domain.Entities.ProductDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Decription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxGuests")
                        .HasColumnType("int");

                    b.Property<int>("MaxNight")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductDetail", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c42e227d-7957-4645-bff8-10286a01fb7b"),
                            CategoryId = new Guid("f821cc78-5a56-4b27-9e1c-0582d4f9aaf8"),
                            Created = new DateTime(2024, 11, 19, 19, 31, 11, 884, DateTimeKind.Local).AddTicks(9093),
                            CreatedBy = "Admin",
                            Decription = "PENHOUSE 180smq 3 with super large PANORAMA BALCONY at CENTANA District 2 HCMC",
                            ImgUrl = "[\"img url 1\",\"img url 2\"]",
                            Location = "Quận 2, Vietnam",
                            MaxGuests = 10,
                            MaxNight = 10,
                            Name = "Centana Penthouse 3BR_180sqm Panoramic CityVIEW",
                            OriginalPrice = 10m,
                            Price = 7m
                        },
                        new
                        {
                            Id = new Guid("bd5886ef-f899-4123-8bf3-e3061100b449"),
                            CategoryId = new Guid("f821cc78-5a56-4b27-9e1c-0582d4f9aaf8"),
                            Created = new DateTime(2024, 11, 19, 19, 31, 11, 884, DateTimeKind.Local).AddTicks(9114),
                            CreatedBy = "Admin",
                            Decription = "The Mirror Villa is luxurious all the way and features everything you can expect from a smart, upscale property of 21st century. It impresses with utilizing contemporary and distinctive materials, finishing with the utmost attention to details and quality, innovative technologies and high-end appliances.",
                            ImgUrl = "[\"img url 1\",\"img url 2\"]",
                            Location = "Thành phố Nha Trang, Vietnam",
                            MaxGuests = 8,
                            MaxNight = 8,
                            Name = "VILLA VENITY Sky",
                            OriginalPrice = 8m,
                            Price = 6m
                        });
                });

            modelBuilder.Entity("HyperhireWebAPI.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9b268d85-b414-46c6-8cb4-71a4197ddd43"),
                            Created = new DateTime(2024, 11, 19, 19, 31, 11, 884, DateTimeKind.Local).AddTicks(9132),
                            CreatedBy = "Admin",
                            Password = "123456",
                            UserName = "123456789"
                        });
                });

            modelBuilder.Entity("HyperhireWebAPI.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("HyperhireWebAPI.Domain.Entities.ProductDetail", "Products")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyperhireWebAPI.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Products");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HyperhireWebAPI.Domain.Entities.ProductDetail", b =>
                {
                    b.HasOne("HyperhireWebAPI.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("HyperhireWebAPI.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
